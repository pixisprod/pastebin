services:
  kafka:
    image: bitnami/kafka:4.0.0
    container_name: ${KAFKA_SERVER}
    environment:
      - KAFKA_CFG_KAFKA_CLUSTER_ID=${KAFKA_CLUSTER_ID}
      - KAFKA_CFG_NODE_ID=${KAFKA_NODE_ID}
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:${KAFKA_SERVER_PORT},CONTROLLER://:${KAFKA_CONTROLLER_PORT}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=${KAFKA_NODE_ID}@${KAFKA_SERVER}:${KAFKA_CONTROLLER_PORT}
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER


  auth_db:
    image: postgres:14
    container_name: auth_db
    environment:
      - POSTGRES_USER=${AUTH_DB_USER}
      - POSTGRES_PASSWORD=${AUTH_DB_PASSWORD}
      - POSTGRES_DB=${AUTH_DB_NAME}
    restart: unless-stopped


  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    env_file:
      - ./.env
    depends_on:
      - auth_db
    restart: unless-stopped


  paste_db:
    image: postgres:14
    container_name: paste_db
    environment:
      - POSTGRES_USER=${PASTE_DB_USER}
      - POSTGRES_PASSWORD=${PASTE_DB_PASSWORD}
      - POSTGRES_DB=${PASTE_DB_NAME}
    restart: unless-stopped
  
  
  paste_service:
    build:
      context: ./paste_service
      dockerfile: Dockerfile
    container_name: paste_service
    env_file:
      - ./.env
    depends_on:
      - paste_db
      - kafka
    restart: unless-stopped


  notification_db:
    image: postgres:14
    container_name: notification_db
    environment:
      - POSTGRES_USER=${NOTIFICATION_DB_USER}
      - POSTGRES_PASSWORD=${NOTIFICATION_DB_PASSWORD}
      - POSTGRES_DB=${NOTIFICATION_DB_NAME}
    restart: unless-stopped


  notification_service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile
    container_name: notification_service
    env_file:
      - ./.env
    depends_on:
      - notification_db
      - kafka
    restart: unless-stopped


  gateway:
    build:
      context: ./nginx_gateway
      dockerfile: Dockerfile
    container_name: gateway
    ports:
      - 8080:80
    restart: unless-stopped

  
  telegram_worker:
    build:
      context: ./telegram_worker
      dockerfile: Dockerfile
    container_name: telegram_worker
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - ./.env
    depends_on:
      - kafka
    restart: unless-stopped


  ngrok:
    image: ngrok/ngrok:3-alpine
    command: start --none
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTH_TOKEN}

  
  